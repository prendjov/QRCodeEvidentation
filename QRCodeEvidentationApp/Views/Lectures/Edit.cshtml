@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Newtonsoft.Json
@model QRCodeEvidentationApp.Models.DTO.LectureEditDto

@{
ViewData["Title"] = "Edit Lecture";
Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="text-center my-4">@ViewData["Title"]</h1>

<h4 class="mb-4">Edit Lecture</h4>
<hr />
<div class="row justify-content-center">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="lecture.Id" />
            <input type="hidden" asp-for="lectureId" />
            <input type="hidden" asp-for="lecture.ProfessorId" />

            <div class="form-group mb-3">
                <label asp-for="lecture.Title" class="control-label"></label>
                <input asp-for="lecture.Title" class="form-control" />
                <span asp-validation-for="lecture.Title" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="lecture.StartsAt" class="control-label"></label>
                <input asp-for="lecture.StartsAt" id="StartsAt" class="form-control" />
                <span class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="lecture.EndsAt" class="control-label"></label>
                <input asp-for="lecture.EndsAt" id="EndsAt" class="form-control" />
                <span class="text-danger"></span>
            </div>

            <div id="lectureDetails">
                <div class="form-group mb-3">
                    <label for="Type">Select Type</label>
                    @Html.DropDownListFor(model => model.lecture.Type, new SelectList(Model.Type, Model.lecture.Type), new { @class = "form-control", id = "Type" })
                </div>

                <div class="form-group mb-3">
                    <label asp-for="lecture.ValidRegistrationUntil" class="control-label"></label>
                    <input asp-for="lecture.ValidRegistrationUntil" id="validRegistrationUntil" class="form-control" />
                    <span class="text-danger"></span>
                </div>

                <div class="form-group mb-3" id="courseGroups">
                    <label for="GroupCourseId">Select Group of Course</label>
                    @Html.DropDownListFor(model => model.GroupCourseId, new SelectList(Model.Groups, "Id", "Name", Model.lecture.LectureGroup.Name), new { @class = "form-control", id = "Groups" })
                </div>
                
                <!-- Submit Button -->
                <div class="form-group text-center mt-4">
                    <input type="submit" value="Save" id="submitBtn" class="btn btn-primary w-100" />
                </div>
            </div>

            <p id="errorMessage" style="color: red;"></p>
        </form>
    </div>
</div>

<div class="text-center">
    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
</div>

@section Scripts {
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var errorMessage = document.getElementById("errorMessage");
        var startsAtInput = document.getElementById("StartsAt");
        var endsAtInput = document.getElementById("EndsAt");
        var validRegistrationUntilInput = document.getElementById("validRegistrationUntil");
        var submitBtn = document.getElementById("submitBtn");

        // Initial state: Disable the button
        submitBtn.disabled = true;

        function validateDates() {
            var startsAt = new Date(startsAtInput.value);
            var endsAt = new Date(endsAtInput.value);
            var validRegistrationUntil = new Date(validRegistrationUntilInput.value);

            if (isNaN(startsAt) || isNaN(endsAt) || isNaN(validRegistrationUntil)) {
                // If any date is invalid, disable the button
                errorMessage.textContent = "Please fill in all date fields with valid dates.";
                submitBtn.disabled = true;
                return;
            }

            if (startsAt >= endsAt) {
                errorMessage.textContent = "StartsAt must be before EndsAt.";
                submitBtn.disabled = true;
                return;
            }

            if (!(startsAt <= validRegistrationUntil && validRegistrationUntil <= endsAt)) {
                errorMessage.textContent = "ValidRegistrationUntil must be between StartsAt and EndsAt.";
                submitBtn.disabled = true;
                return;
            }

            // All validations passed
            errorMessage.textContent = "";
            submitBtn.disabled = false;
        }

        // Attach event listeners to date inputs
        startsAtInput.addEventListener("input", validateDates);
        endsAtInput.addEventListener("input", validateDates);
        validRegistrationUntilInput.addEventListener("input", validateDates);

        // Perform initial validation
        validateDates();
    });
</script>
}