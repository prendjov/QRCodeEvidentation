@model IEnumerable<QRCodeEvidentationApp.Models.Lecture>

@{
    ViewData["Title"] = "Lectures";
}

<h1 class="text-center my-4">@ViewData["Title"]</h1>

<p class="text-end">
    <a asp-action="CreateView" class="btn btn-success">Create New Lecture</a>
</p>

<div class="table-responsive">
    <table class="table table-bordered table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>@Html.DisplayNameFor(model => model.Title)</th>
                <th>@Html.DisplayNameFor(model => model.StartsAt)</th>
                <th>@Html.DisplayNameFor(model => model.Type)</th>
                <th>@Html.DisplayNameFor(model => model.ValidRegistrationUntil)</th>
                <th>@Html.DisplayNameFor(model => model.RoomName)</th>
                <th class="text-center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr id="lecture-row-@item.Id">
                    <td>@Html.DisplayFor(modelItem => item.Title)</td>
                    <td>@Html.DisplayFor(modelItem => item.StartsAt)</td>
                    <td>@Html.DisplayFor(modelItem => item.Type)</td>
                    <td id="validRegistrationUntil">@Html.DisplayFor(modelItem => item.ValidRegistrationUntil)</td>
                    <td>@Html.DisplayFor(modelItem => item.RoomName)</td>
                    <td class="text-center">
                        <div class="btn-group" role="group">
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-primary m-1">Edit</a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-primary m-1">Details</a>
                            <button class="btn btn-sm btn-danger m-1 delete-lecture-btn" data-delete-lecture-id="@item.Id">Delete</button>
                            <button class="btn btn-sm btn-warning m-1 disable-lecture-btn" data-lecture-id="@item.Id" data-valid-registration-until="@item.ValidRegistrationUntil">Disable Lecture</button>
                            <a asp-action="GetLectureAnalytics" asp-route-id="@item.Id" class="btn btn-sm btn-primary m-1">Analytics</a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
    $(document).ready(function () {
        $('.disable-lecture-btn').each(function () {
            var validRegistrationUntil = new Date($(this).data('valid-registration-until'));
            var now = new Date();
            if (now > validRegistrationUntil) {
                $(this).prop('disabled', true);
            }
        });

        function formatDate(date) {
            var options = {
                month: 'numeric', day: 'numeric', year: 'numeric',
                hour: 'numeric', minute: 'numeric', second: 'numeric',
                hour12: true
            };
            return new Intl.DateTimeFormat('en-US', options).format(date);
        }

        $('.disable-lecture-btn').click(function (e) {
            e.preventDefault();
            var button = $(this);
            var lectureId = button.data('lecture-id');
            $.ajax({
                url: '@Url.Action("DisableLecture")',
                type: 'POST',
                data: {
                    id: lectureId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (result) {
                    if (result.success) {
                        alert(result.message);
                        button.prop('disabled', true);
                        var formattedDate = formatDate(new Date(result.validRegistrationUntil));
                        $('#lecture-row-' + lectureId).find('#validRegistrationUntil').text(formattedDate);
                    } else {
                        alert('Error: ' + result.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('Error disabling lecture');
                }
            });
        });

        $('.delete-lecture-btn').click(function (e) {
            e.preventDefault();
            var button = $(this);
            var lectureId = button.data('delete-lecture-id');
            $.ajax({
                url: '@Url.Action("Delete")',
                type: 'POST',
                data: {
                    id: lectureId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (result) {
                    if (result.success) {
                        alert(result.message);
                        // Remove the row from the table
                        $('#lecture-row-' + lectureId).remove();
                    } else {
                        alert('Error: ' + result.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('Error deleting lecture');
                }
            });
        });

        /*$('.lecture-analytics-btn').click(function (e) {
            e.preventDefault();
            var button = $(this);
            var lectureId = button.data('lecture-id');

            // Redirect to the action that generates and downloads the PDF
            window.location.href = '@Url.Action("GetLectureAnalytics")' + '?id=' + lectureId;
        });*/
    });
</script>
}