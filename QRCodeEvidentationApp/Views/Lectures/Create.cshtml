@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Newtonsoft.Json
@model QRCodeEvidentationApp.Models.DTO.LectureDto

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Create</h1>

<h4>Lecture</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="createForm" asp-action="Create" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="Room">Select Room</label>
                <select id="RoomId" class="form-control" asp-for="RoomId"></select>
            </div>
            <div class="form-group">
                <label for="Type">Select Room</label>
                @Html.DropDownListFor(model => model.TypeSelected, new SelectList(Model.Type), "Select a type", new { @class = "form-control", id = "Type" })
            </div>
            <div class="form-group">
                <label asp-for="ValidRegistrationUntil" class="control-label"></label>
                <input asp-for="ValidRegistrationUntil" id="validRegistrationUntil" class="form-control" />
                <span asp-validation-for="ValidRegistrationUntil" class="text-danger"></span>
            </div>

            <div class="form-group" id="courseAssistantGroup" style="display: none;">
                <label for="CoursesAssistant">Select Assistant</label>
                @Html.DropDownListFor(model => model.CourseAssistantId, new SelectList(Model.CoursesAssistant, "Id", "Course.LastNameRegex"), "Select an Assistant", new { @class = "form-control", id = "CoursesAssistant" })
            </div>
            <div class="form-group" id="courseProfessorGroup" style="display: none;">
                <label for="CoursesProfessor">Select Professor</label>
                @Html.DropDownListFor(model => model.CourseProfessorId, new SelectList(Model.CoursesProfessor, "Id", "Course.LastNameRegex"), "Select a Professor", new { @class = "form-control", id = "CoursesProfessor" })
            </div>

            <input type="hidden" asp-for="StartsAt" />
            <input type="hidden" asp-for="EndsAt" />
            <input type="hidden" asp-for="CoursesProfessor" />
            <input type="hidden" asp-for="CoursesAssistant" />
            <input type="hidden" asp-for="loggedInProfessorId" />
            
            <div class="form-group">
                <input type="submit" value="Save" id="submitBtn" class="btn btn-primary" />
            </div>

            <!-- Error message display -->
            <p id="errorMessage" style="color: red;"></p>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <script>
        let errorMessage = document.getElementById("errorMessage");
             // Display error message if present
             if ('@Model.ErrMessage') {
                 errorMessage.textContent = '@Model.ErrMessage';
             }

        document.addEventListener("DOMContentLoaded", function () {
            var typeDropdown = document.getElementById("Type");
            var courseAssistantGroup = document.getElementById("courseAssistantGroup");
            var courseProfessorGroup = document.getElementById("courseProfessorGroup");                
            var errorMessage = document.getElementById("errorMessage");
            var validRegistrationUntilInput = document.getElementById("validRegistrationUntil");
            var submitBtn = document.getElementById("submitBtn");

            var startsAt = new Date('@Model.StartsAt');
            var endsAt = new Date('@Model.EndsAt');

            function validateDates() {
                var validRegistrationUntil = new Date(validRegistrationUntilInput.value);

                if (startsAt < validRegistrationUntil && validRegistrationUntil < endsAt) {
                    errorMessage.textContent = "";
                    submitBtn.disabled = false;
                } else {
                    errorMessage.textContent = "ValidRegistrationUntil must be between StartsAt and EndsAt.";
                    submitBtn.disabled = true;
                }
            }

            validRegistrationUntilInput.addEventListener("input", validateDates);

            // Initial validation check
            validateDates();
            

            var allRooms = @Html.Raw(JsonConvert.SerializeObject(Model.AllRooms, new JsonSerializerSettings {
            ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            }));
            var lecturesOnSpecificDate = @Html.Raw(JsonConvert.SerializeObject(Model.LecturesOnSpecificDate, new JsonSerializerSettings {
            ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            }));
            var roomDropdown = document.getElementById("RoomId");


            function filterAvailableRooms() {
                var occupiedRooms = new Set();
                lecturesOnSpecificDate.forEach(function (lecture) {
                    var lectureStart = new Date(lecture.StartsAt);
                    var lectureEnd = new Date(lecture.EndsAt);
                    
                    var startDate = startsAt;
                    var endDate = endsAt;
                                        
                    if ((startDate >= lectureStart && lectureEnd >= startDate) ||
                        (endDate >= lectureStart && lectureEnd >= endDate) ||
                        (endDate >= lectureEnd && startDate <= lectureStart)) {
                        if (lecture.Room) occupiedRooms.add(lecture.Room.Name);
                    }
                });

                var availableRooms = allRooms.filter(function (room) {
                    return !occupiedRooms.has(room.Name);
                });

                updateRoomDropdown(availableRooms);
            }

            function updateRoomDropdown(availableRooms) {
                // Clear existing options
                roomDropdown.innerHTML = '<option value="">Select a Room</option>';

                // Populate new options
                availableRooms.forEach(function (room) {
                    var option = document.createElement("option");
                    option.value = room.Name; // Assuming Room has Id property
                    option.textContent = room.Name;
                    roomDropdown.appendChild(option);
                });
            }

            // Initial filtering and dropdown update
            filterAvailableRooms();

            // Display error message if present
            if ('@Model.ErrMessage') {
                errorMessage.textContent = '@Model.ErrMessage';
            }

            function displayCorrectDropdown(selectedValue) {
                courseAssistantGroup.style.display = "none";
                courseProfessorGroup.style.display = "none";

                if (selectedValue === "Аудиториски") {
                    courseAssistantGroup.style.display = "block";
                } else if (selectedValue === "Предавања") {
                    courseProfessorGroup.style.display = "block";
                }
            }

            // Display the correct dropdown on page load based on the selected value
            displayCorrectDropdown(typeDropdown.value);

            // Add event listener for dropdown change
            typeDropdown.addEventListener("change", function () {
                displayCorrectDropdown(this.value);
            });
        });
    
    </script>
}