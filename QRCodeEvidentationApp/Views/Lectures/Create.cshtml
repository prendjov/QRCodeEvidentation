@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Newtonsoft.Json
@model QRCodeEvidentationApp.Models.DTO.LectureDto

@{
ViewData["Title"] = "Create";
Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <h1 class="mb-4 text-center">Create Lecture</h1>
    <h4 class="text-muted">Lecture Details</h4>
    <hr />
    <div class="row">
        <div class="col-md-8 mx-auto">
            <form id="createForm" asp-action="Create" method="post" class="needs-validation" novalidate>
                <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                <!-- Title -->
                <div class="form-group mb-3">
                    <label asp-for="Title" class="form-label"></label>
                    <input asp-for="Title" class="form-control" placeholder="Enter lecture title" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <!-- Start Time -->
                <div class="form-group mb-3">
                    <label asp-for="StartsAt" class="form-label">Start Time</label>
                    <input asp-for="StartsAt" class="form-control datetimepicker" placeholder="Select start time" />
                    <span class="text-danger"></span>
                </div>

                <!-- End Time -->
                <div class="form-group mb-3">
                    <label asp-for="EndsAt" class="form-label">End Time</label>
                    <input asp-for="EndsAt" class="form-control datetimepicker" placeholder="Select end time" />
                    <span class="text-danger"></span>
                </div>

                <!-- Lecture Details -->
                <div id="lectureDetails" style="display: none;">
                    <!-- Room -->
                    <div class="form-group mb-3">
                        <label for="Room">Select Room</label>
                        <select id="RoomId" class="form-select" asp-for="RoomId"></select>
                    </div>

                    <!-- Type -->
                    <div class="form-group mb-3">
                        <label for="Type">Lecture Type</label>
                        @Html.DropDownListFor(model => model.TypeSelected, new SelectList(Model.Type), "Select a type", new { @class = "form-select", id = "Type" })
                    </div>

                    <!-- Valid Registration Until -->
                    <div class="form-group mb-3">
                        <label asp-for="ValidRegistrationUntil" class="form-label">Valid Registration Until</label>
                        <input asp-for="ValidRegistrationUntil" id="validRegistrationUntil" class="form-control" />
                        <span asp-validation-for="ValidRegistrationUntil" class="text-danger"></span>
                    </div>

                    <!-- Group of Courses -->
                    <div class="form-group mb-3">
                        <label for="GroupCourseId">Select Group of Courses</label>
                        @Html.DropDownListFor(model => model.GroupCourseId, new SelectList(Model.Groups, "Id", "Name"), "Select Group of Courses", new { @class = "form-select", id = "Groups" })
                    </div>

                    <!-- Hidden Fields -->
                    <input type="hidden" asp-for="Groups" />
                    <input type="hidden" asp-for="CoursesProfessor" />
                    <input type="hidden" asp-for="CoursesAssistant" />
                    <input type="hidden" asp-for="loggedInProfessorId" />

                    <!-- Submit Button -->
                    <div class="form-group text-center mt-4">
                        <input type="submit" value="Save" id="submitBtn" class="btn btn-primary w-100" />
                    </div>
                </div>

                <!-- Error Message -->
                <p id="errorMessage" class="text-danger text-center mt-3"></p>
            </form>
        </div>
    </div>

    <div class="text-center mt-4">
        <a asp-action="Index" class="btn btn-secondary">Back to List</a>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let errorMessage = document.getElementById("errorMessage");
        var typeDropdown = document.getElementById("Type");
        var validRegistrationUntilInput = document.getElementById("validRegistrationUntil");
        var submitBtn = document.getElementById("submitBtn");
        var roomDropdown = document.getElementById("RoomId");
        var startsAtInput = document.getElementById("StartsAt");
        var endsAtInput = document.getElementById("EndsAt");
        var lectureDetails = document.getElementById("lectureDetails");

        var allRooms = @Html.Raw(JsonConvert.SerializeObject(Model.AllRooms, new JsonSerializerSettings
        {
        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
        }));
        var lecturesOnSpecificDate = @Html.Raw(JsonConvert.SerializeObject(Model.LecturesOnSpecificDate, new JsonSerializerSettings
        {
        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
        }));

        // Display error message if present
        if ('@Model.ErrMessage') {
            errorMessage.textContent = '@Model.ErrMessage';
        }

        function validateStartAndEnd(){
            var startsAt = new Date(startsAtInput.value);
            var endsAt = new Date(endsAtInput.value);

            if (startsAt < new Date(Date.now()) || endsAt < new Date(Date.now())){
                return;
            }

            if (startsAt > endsAt){
                errorMessage.innerText = "Start date cannot be bigger than end date";
            }else {
                errorMessage.innerText = "";
            }
            
            filterAvailableRooms(startsAt, endsAt);
        }

        function validateDates() {
            var startsAt = new Date(startsAtInput.value);
            var endsAt = new Date(endsAtInput.value);
            var validRegistrationUntil = new Date(validRegistrationUntilInput.value);
            if (startsAt < validRegistrationUntil && validRegistrationUntil < endsAt) {
                errorMessage.textContent = "";
                submitBtn.disabled = false;
            } else {
                if (lectureDetails.style.display == "block") {
                    errorMessage.textContent = "ValidRegistrationUntil must be between StartsAt and EndsAt.";
                    submitBtn.disabled = true;
                }
            }
        }

        function filterAvailableRooms(startsAt, endsAt) {
            var occupiedRooms = new Set();
            lecturesOnSpecificDate.forEach(function (lecture) {
                var lectureStart = new Date(lecture.StartsAt);
                var lectureEnd = new Date(lecture.EndsAt);

                if ((startsAt >= lectureStart && lectureEnd >= startsAt) ||
                    (endsAt >= lectureStart && lectureEnd >= endsAt) ||
                    (endsAt >= lectureEnd && startsAt <= lectureStart)) {
                    if (lecture.Room) occupiedRooms.add(lecture.Room.Name);
                }
            });

            var availableRooms = allRooms.filter(function (room) {
                return !occupiedRooms.has(room.Name);
            });

            updateRoomDropdown(availableRooms);
            // Show or hide lecture details based on available rooms
            if (availableRooms.length > 0) {
                lectureDetails.style.display = "block";
                validateDates()
            } else {
                lectureDetails.style.display = "none";
                errorMessage.innerText = "There are no available rooms for the specified time period. Please choose another start time or end time."
            }
        }

        function updateRoomDropdown(availableRooms) {
            // Clear existing options
            roomDropdown.innerHTML = '<option value="">Select a Room</option>';

            roomDropdown.innerHTML = '';

            // Populate new options
            availableRooms.forEach(function (room) {
                var option = document.createElement("option");
                option.value = room.Name; // Assuming Room has Id property
                option.textContent = room.Name;
                roomDropdown.appendChild(option);
            });
        }

        // Add event listeners for date inputs
        startsAtInput.addEventListener("input", validateStartAndEnd);
        endsAtInput.addEventListener("input", validateStartAndEnd);
        validRegistrationUntilInput.addEventListener("input", validateDates);

        // Initial validation check
        validateDates();
    });
</script>
}